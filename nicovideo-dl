#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2009 Keiichiro Nagano
# Copyright (c) 2009 Kimura Youichi
# Copyright (c) 2006-2008 Ricardo Garcia Gonzalez
# Copyright (c) 2008 Ying-Chun Liu (PaulLiu)
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
# Except as contained in this notice, the name(s) of the above copyright
# holders shall not be used in advertising or otherwise to promote the
# sale, use or other dealings in this Software without prior written
# authorization.
#
import getpass
import http
import math
import netrc
import optparse
import os
import re
import socket
import string
import sys
import time
import urllib
import urllib.request
import cgi
import codecs
import xml.parsers.expat
import html
import json

# Global constants
const_version = '2011.02.08'
const_project_url = 'http://sourceforge.jp/projects/nicovideo-dl'

const_1k = 1024
const_initial_block_size = 10 * const_1k
const_epsilon = 0.0001
const_timeout = 120

const_video_url_str = 'https://www.nicovideo.jp/watch/%s'
const_video_url_re = re.compile(r'^((?:http[s]?://)?(?:\w+\.)?(?:nicovideo\.jp/(?:v/|(?:watch(?:\.php)?))?/)?(\w+))')
const_login_url_str = 'https://account.nicovideo.jp/api/v1/login?site=niconico&mail_or_tel=1'
const_login_post_str = 'current_form=login_form&mail_tel=%s&password=%s&login__submit=Login'
const_url_url_param_re = re.compile(r"url[=](http[^&]*)")
const_video_url_info_str = 'https://flapi.nicovideo.jp/api/getflv/%s'
const_video_title_re = re.compile(r'<title>(.*)</title>', re.M | re.I)
const_video_type_re = re.compile(r'^http[s]?://.*\.nicovideo\.jp/smile\?(.*?)=.*')

const_comment_getthreadkey_url_str = 'http://flapi.nicovideo.jp/api/getthreadkey?thread=%s'
const_comment_request_str = '<thread thread="%s" version="20061206" res_from="-1000" user_id="%s"%s/>'

# Print error message, followed by standard advice information, and then exit
def error_advice_exit(error_text):
	sys.stderr.write('Error: %s.\n' % error_text)
	sys.stderr.write('Try again several times. It may be a temporary problem.\n')
	sys.stderr.write('Other typical problems:\n\n')
	sys.stderr.write('* Video no longer exists.\n')
	sys.stderr.write('* You provided the account data, but it is not valid.\n')
	sys.stderr.write('* The connection was cut suddenly for some reason.\n')
	sys.stderr.write('* Your account is free and perhaps only usable at 02:00 to 19:00 (+0900).\n')
	sys.stderr.write('* Niconico changed their system, and the program no longer works.\n')
	sys.stderr.write('\nTry to confirm you are able to view the video using a web browser.\n')
	sys.stderr.write('Use the same video URL and account information, if needed, with this program.\n')
	sys.stderr.write('When using a proxy, make sure http_proxy has http://host:port format.\n')
	sys.stderr.write('Try again several times and contact me if the problem persists.\n')
	sys.exit('\n')

# Wrapper to create custom requests with typical headers
def request_create(url, extra_headers, post_data=None):
	retval = urllib.request.Request(url)
	if post_data is not None:
		retval.data = post_data
	retval.add_header('User-Agent', 'nicovideo-dl/%s (%s)' % (const_version, const_project_url))
	retval.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')
	retval.add_header('Accept', 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5')
	retval.add_header('Accept-Language', 'en-us,en;q=0.5')
	if extra_headers is not None:
		for header in extra_headers:
			retval.add_header(header[0], header[1])
	return retval

# Perform a request, process headers and return response
def perform_request(url, headers=None, data=None):
	request = request_create(url, headers, data)
	response = urllib.request.urlopen(request)
	return response

# Conditional print
def cond_print(str):
	global cmdl_opts
	if not (cmdl_opts.quiet or cmdl_opts.get_url):
		sys.stdout.write(str)
		sys.stdout.flush()

# Title string normalization
def title_string_norm(title):
	title_s = title
	for title_p in ['‐ニコニコ動画(SP1)',
			'‐ニコニコ動画(夏)',
			'‐ニコニコ動画(秋)', # as of Oct 2008
			'‐ニコニコ動画(冬)', # as of 5 Dec 2008
			'‐ニコニコ動画(ββ)', # as of 12 Dec 2008
			'‐ニコニコ動画(9)', # as of 29 Oct 2009
			'‐ ニコニコ動画(原宿)', # as of 29 Oct 2010
			]:
		if (title_s.endswith(title_p)):
			title_s = title_s[:title_s.rfind(title_p)]
			break
	title_s = title_s.replace(os.sep, '%')
	title_s = '_'.join(title_s.split())
	return title_s

# Title string minimal transformation
def title_string_touch(title):
	return title.replace(os.sep, '%')

# Generic download step
def download_step(return_data_flag, step_title, step_error, url, post_data=None):
	try:
		cond_print('%s... ' % step_title)
		response = perform_request(url, data=post_data)
		data = response.read().decode(response.headers.get_content_charset())
		cond_print('done.\n')
		if return_data_flag:
			return data, response
		return None

#	except (urllib.error.URLError, ValueError, http.client.HTTPException, TypeError, socket.error):
#		cond_print('failed.\n')
#		error_advice_exit(step_error)

	except KeyboardInterrupt:
		sys.exit('\n')

# Generic extract step
def extract_step(step_title, step_error, regexp, data):
	try:
		cond_print('%s... ' % step_title)
		match = regexp.search(data)
		
		if match is None:
			cond_print('failed.\n')
			error_advice_exit(step_error)
		
		extracted_data = match.group(1)
		cond_print('done.\n')
		return extracted_data
	
	except KeyboardInterrupt:
		sys.exit('\n')

# Calculate new block size based on previous block size
def new_block_size(before, after, bytes):
	new_min = max(bytes / 2.0, 1.0)
	new_max = max(bytes * 2.0, 1.0)
	dif = after - before
	if dif < const_epsilon:
		return int(new_max)
	rate = bytes / dif
	if rate > new_max:
		return int(new_max)
	if rate < new_min:
		return int(new_min)
	return int(rate)

# Get optimum 1k exponent to represent a number of bytes
def optimum_k_exp(num_bytes):
	global const_1k
	if num_bytes == 0:
		return 0
	return int(math.log(num_bytes, const_1k))

# Get optimum representation of number of bytes
def format_bytes(num_bytes):
	global const_1k
	try:
		exp = optimum_k_exp(num_bytes)
		suffix = 'bkMGTPEZY'[exp]
		if exp == 0:
			return '%s%s' % (num_bytes, suffix)
		converted = float(num_bytes) / float(const_1k**exp)
		return '%.2f%s' % (converted, suffix)
	except IndexError:
		sys.exit('Error: internal error formatting number of bytes.')

# Calculate ETA and return it in string format as MM:SS
def calc_eta(start, now, total, current):
	dif = now - start
	if current == 0 or dif < const_epsilon:
		return '--:--'
	rate = float(current) / dif
	eta = int((total - current) / rate)
	(eta_mins, eta_secs) = divmod(eta, 60)
	if eta_mins > 99:
		return '--:--'
	return '%02d:%02d' % (eta_mins, eta_secs)

# Calculate speed and return it in string format
def calc_speed(start, now, bytes):
	dif = now - start
	if bytes == 0 or dif < const_epsilon:
		return 'N/A b'
	return format_bytes(float(bytes) / dif)

# Download comment and save to the file
def download_comment(cmdl_opts, video_url, video_filename, video_url_id, video_info_data):
	def extract_param(param, key):
		if key in param:
			return param[key][0]
		else:
			error_advice_exit('cannot extract %s parameter' % key)

	def post(name, url, post_data=None):
		data, res = download_step(True, 'Retrieving %s' % name, 'unable to get %s' % name, url, post_data=post_data)
		return data

	def get_thread_info():
		url = const_comment_getthreadkey_url_str % video_url_id
		data = post('thread key', url)
		info = cgi.parse_qs(data)
		return extract_param(info, "threadkey"), extract_param(info, "force_184")

	def make_request(thread_id, user_id):
		options = ''

		if video_url_id.isdigit():
			options = ' threadkey="%s" force_184="%s"' % get_thread_info()

		return const_comment_request_str % (thread_id, user_id, options)
	
	def parse_comment_xml(comment_xml):
		comments = []

		def start(name, attrs):
			if name == 'chat':
				comments.append([int(attrs['vpos']), None])

		def text(data):
			comments[-1][1] = data

		parser = xml.parsers.expat.ParserCreate()
		parser.StartElementHandler = start
		parser.CharacterDataHandler = text
		parser.Parse(comment_xml)

		comments.sort()

		return comments

	def write_comments(comments, f):
		f.write('comments for %s on %s\n' % (video_url, time.asctime()))

		if all(vpos < 600000 for vpos, comment in comments):
			timestamp = '%02d:%02d '
		else:
			timestamp = '%03d:%02d '

		for vpos, comment in comments:
			f.write(timestamp % divmod(vpos / 100, 60))
			f.write(comment)
			f.write('\n')

	info = cgi.parse_qs(video_info_data)
	thread_id = extract_param(info, "thread_id")
	user_id = extract_param(info, "user_id")
	msg_url = extract_param(info, "ms")

	request_xml = make_request(thread_id, user_id)
	comment_xml = post('comment', msg_url, post_data=request_xml)

	outfile = cmdl_opts.comment_outfile

	if outfile is None:
		if cmdl_opts.comment_in_xml:
			outfile = '%s.xml' % video_filename
		else:
			outfile = '%s.txt' % video_filename

	try:
		f = codecs.open(outfile, 'w', 'utf-8')
	except (IOError, OSError):
		sys.exit('Error: unable to open "%s" for writing.' % outfile)

	if cmdl_opts.comment_in_xml:
		f.write(comment_xml.decode('utf-8'))
	else:
		write_comments(parse_comment_xml(comment_xml), f)

	f.close()

	cond_print('comment saved to %s\n' % outfile)

# Create the command line options parser and parse command line
cmdl_usage = 'usage: %prog [options] video_url'
cmdl_version = const_version
cmdl_parser = optparse.OptionParser(usage=cmdl_usage, version=cmdl_version, conflict_handler='resolve')
cmdl_parser.add_option('-h', '--help', action='help', help='print this help text and exit')
cmdl_parser.add_option('-v', '--version', action='version', help='print program version and exit')
cmdl_parser.add_option('-u', '--username', dest='username', metavar='USERNAME', help='account username')
cmdl_parser.add_option('-p', '--password', dest='password', metavar='PASSWORD', help='account password')
cmdl_parser.add_option('-o', '--output', dest='outfile', metavar='FILE', help='output video file name')
cmdl_parser.add_option('-q', '--quiet', action='store_true', dest='quiet', help='activates quiet mode')
cmdl_parser.add_option('-s', '--simulate', action='store_true', dest='simulate', help='do not download video')
cmdl_parser.add_option('-t', '--title', action='store_true', dest='use_title', help='use title in file name')
cmdl_parser.add_option('-l', '--literal', action='store_true', dest='use_literal', help='use literal title in file name')
cmdl_parser.add_option('-n', '--netrc', action='store_true', dest='use_netrc', help='use .netrc authentication data')
cmdl_parser.add_option('-g', '--get-url', action='store_true', dest='get_url', help='print final video URL only')
cmdl_parser.add_option('-2', '--title-too', action='store_true', dest='get_title', help='used with -g, print title too')
cmdl_parser.add_option('-c', '--get-comment', action='store_true', dest='get_comment', help='download comment')
cmdl_parser.add_option('-x', '--raw-comment', action='store_true', dest='comment_in_xml', help='save comment in raw xml')
cmdl_parser.add_option('--comment-output', dest='comment_outfile', metavar='FILE', help='output comment file name')
(cmdl_opts, cmdl_args) = cmdl_parser.parse_args()

# Set socket timeout
socket.setdefaulttimeout(const_timeout)

# Get video URL
if len(cmdl_args) == 0:
	cmdl_parser.print_help()
	sys.exit('\n')

# Check conflicting options
if cmdl_opts.outfile is not None and (cmdl_opts.simulate or cmdl_opts.get_url):
	sys.stderr.write('Warning: video file name given but will not be used.\n')

if cmdl_opts.outfile is not None and (cmdl_opts.use_title or cmdl_opts.use_literal):
	sys.exit('Error: using the video title conflicts with using a given file name.')

if cmdl_opts.use_title and cmdl_opts.use_literal:
	sys.exit('Error: cannot use title and literal title at the same time.')

if cmdl_opts.quiet and cmdl_opts.get_url:
	sys.exit('Error: cannot be quiet and print final URL at the same time.')

# Incorrect option formatting
if cmdl_opts.username is None and cmdl_opts.password is not None:
	sys.exit('Error: password give but username is missing.')

if cmdl_opts.use_netrc and (cmdl_opts.username is not None or cmdl_opts.password is not None):
	sys.exit('Error: cannot use netrc and username/password at the same time.')

if cmdl_opts.get_url is None and cmdl_opts.get_title is not None:
	sys.exit('Error: getting title requires getting URL.')

# Get account information if any
account_username = None
account_password = None

if cmdl_opts.use_netrc:
	try:
		info = netrc.netrc().authenticators('nicovideo')
		if info is None:
			sys.exit('Error: no authenticators for machine nicovideo.')
		netrc_username = info[0]
		netrc_password = info[2]
	except IOError:
		sys.exit('Error: unable to read .netrc file.')
	except netrc.NetrcParseError:
		sys.exit('Error: unable to parse .netrc file.')

if cmdl_opts.password is not None:
	account_username = cmdl_opts.username
	account_password = cmdl_opts.password
else:
	if cmdl_opts.username is not None and cmdl_opts.use_netrc:
		if cmdl_opts.username != netrc_username:
			sys.exit('Error: conflicting username from .netrc and command line options.')
		account_username = cmdl_opts.username
		account_password = netrc_password
	elif cmdl_opts.username is not None:
		account_username = cmdl_opts.username
		account_password = getpass.getpass('Type Niconico password and press return: ')
	elif cmdl_opts.use_netrc:
		if len(netrc_username) == 0:
			sys.exit('Error: empty username in .netrc file.')
		account_username = netrc_username
		account_password = netrc_password
	elif account_username is None:
		account_username = input("Type Niconico E-mail account: ")
		account_password = getpass.getpass('Type Niconico password and press return: ')

# Install cookie and proxy handlers
urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()))
urllib.request.install_opener(urllib.request.build_opener(urllib.request.HTTPCookieProcessor()))

# Log in
if account_username is not None:
	url = const_login_url_str
	post = const_login_post_str % (account_username, account_password)
	download_step(False, 'Logging in', 'unable to log in', url, post.encode("utf-8"))

for video_url_cmdl in cmdl_args:
	# Verify video URL format and convert to "standard" format
	video_url_mo = const_video_url_re.match(video_url_cmdl)
	if video_url_mo is None:
		sys.exit('Error: URL does not seem to be a niconico video URL. If it is, report a bug.')
	video_url_id = video_url_mo.group(2)
	video_url = const_video_url_str % video_url_id
	
	video_extension = '.flv'
	
	# Retrieve video webpage
	video_webpage, response = download_step(True, 'Retrieving video webpage', 'unable to retrieve video webpage', video_url)

	# Reconvert URL if redirected
	if response.geturl() != video_url:
		video_url_id = const_video_url_re.match(response.geturl()).group(2)
		video_url = const_video_url_str % video_url_id

	# Extract video title if needed
	if cmdl_opts.use_title or cmdl_opts.use_literal or cmdl_opts.get_title:
		video_title = extract_step('Extracting video title', 'unable to extract video title', const_video_title_re, video_webpage)

	# Extract needed video URL parameters
	video_url_info = const_video_url_info_str % video_url_id
	video_info_data, response = download_step(True, 'Retrieving info data', 'unable to retrieve video webpage', video_url_info)

	cond_print('Extracting URL "url" parameter... ')
	video_url_url_param = urllib.parse.parse_qs(video_info_data)
	if ('url' in video_url_url_param):
		video_url_url_param=video_url_url_param['url'][0]
	else:
		error_advice_exit('cannot extract url parameter')
	cond_print('done.\n')
	video_url_real = video_url_url_param

	video_url_info = const_video_url_str % video_url_id
	video_info_data, response = download_step(True, 'Retrieving info data', 'unable to retrieve video webpage', video_url_info)
	data_api_data_re = re.compile(r'.*data-api-data=["]([^"]*)["].*', re.M | re.I | re.MULTILINE)
	data_api_data_match = data_api_data_re.search(video_info_data)
	if (not (data_api_data_match is None)):
		video_url_url_param = json.loads(html.unescape(data_api_data_match.group(1)))
		if ('video' in video_url_url_param and 'smileInfo' in video_url_url_param['video'] and 'url' in video_url_url_param['video']['smileInfo']):
			video_url_real = video_url_url_param['video']['smileInfo']['url']
	
	# Extract video type and modify video_extension
	video_type_mo = const_video_type_re.match(video_url_real)
	if (video_type_mo):
		if video_type_mo.group(1) == "s":
			video_extension = ".swf"
		elif video_type_mo.group(1) == "m":
			video_extension = ".mp4"
	
	# Get output file name 
	if cmdl_opts.outfile is None:
		video_filename = '%s%s' % (video_url_id, video_extension)
	else:
		video_filename = cmdl_opts.outfile
	
	# Rebuild filename if needed
	if cmdl_opts.use_title or cmdl_opts.use_literal:
		if cmdl_opts.use_title:
			prefix = title_string_norm(video_title)
		else:
			prefix = title_string_touch(video_title)
		video_filename = '%s-%s%s' % (prefix, video_url_id, video_extension)
	
	# Check name
	if not video_filename.lower().endswith(video_extension):
		sys.stderr.write('Warning: video file name does not end in %s\n' % video_extension)
	
	# Download and save comment
	if cmdl_opts.get_comment:
		download_comment(cmdl_opts, video_url, video_filename, video_url_id, video_info_data)
	
	# Retrieve video data
	try:
		cond_print('Requesting video file... ')
		video_data = perform_request(video_url_real)
		cond_print('done.\n')
		cond_print('Video data found at %s\n' % video_data.geturl())
		
		if cmdl_opts.get_title:
			print (video_title)
		
		if cmdl_opts.get_url:
			print (video_data.geturl())
		
		if cmdl_opts.simulate or cmdl_opts.get_url:
			continue
		
		try:
			video_file = open(video_filename, 'wb')
		except (IOError, OSError):
			sys.exit('Error: unable to open "%s" for writing.' % video_filename)
		try:
			video_len = int(video_data.info()['Content-length'])
			video_len_str = format_bytes(video_len)
		except KeyError:
			video_len = None
			video_len_str = 'N/A'
		
		byte_counter = 0
		block_size = const_initial_block_size
		start_time = time.time()
		while True:
			if video_len is not None:
				percent = float(byte_counter) / float(video_len) * 100.0
				percent_str = '%.1f' % percent
				eta_str = calc_eta(start_time, time.time(), video_len, byte_counter)
			else:
				percent_str = '---.-'
				eta_str = '--:--'
			counter = format_bytes(byte_counter)
			speed_str = calc_speed(start_time, time.time(), byte_counter)
			cond_print('\rRetrieving video data: %5s%% (%8s of %s) at %8s/s ETA %s ' % (percent_str, counter, video_len_str, speed_str, eta_str))
	
			before = time.time()
			video_block = video_data.read(block_size)
			after = time.time()
			dl_bytes = len(video_block)
			if dl_bytes == 0:
				break
			byte_counter += dl_bytes
			video_file.write(video_block)
			block_size = new_block_size(before, after, dl_bytes)
		
		if video_len is not None and byte_counter != video_len:
			error_advice_exit('server did not send the expected amount of data')
		
		video_file.close()
		cond_print('done.\n')
		cond_print('Video data saved to %s\n' % video_filename)
	
	except (urllib.request.URLError, ValueError, http.client.HTTPException, TypeError, socket.error):
		cond_print('failed.\n')
		error_advice_exit('unable to download video data')
	
	except KeyboardInterrupt:
		sys.exit('\n')
# Finish
sys.exit()
